clasAsi[2]<-revalue(clasAsi[, c(2)], c("MODELADO DE SISTEMAS ELÉCTRICOS DE POTENCIA (ESP. SISTEMAS)"='MODELADO DE SISTEMAS ELECTRICOS DE POTENCIA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("QUALITY CORE TOOLS"='QUALITY CORTE TOOLS'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("SISTEMAS DE MANUFACTURA"='SISTEMAS DE MANUFACTURA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("SISTEMAS ELÉCTRICOS DE POTENCIA 2 (ESP. SISTEMAS)"='SISTEMAS ELECTRICOS DE POTENCIA 2'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TALLER DE CONTROL ESTADÍSTICO DE PROCESO"='TALLER DE CONTROL ESTADISTICO DE PROCESOS'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TECNOLOGÍA DE CONSERVACIÓN"='TECNOLOGIA DE LA CONSERVACION'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TRANSFERENCIA Y COMERCIALIZACIÓN DE TECNOLOGÍA"="TRANSFERENCIA Y COMERCIALIZACION DE TECNOLOGIA"))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("ENVASADO DE ALIMENTOS  Y LA INDUSTRIA 4.0"="ENVASADO DE ALIMENTOS Y LA INDUSTRIA 4.0"))
#*****
colnames(FParcial)
clasAsi[1] <- chartr('ÁÉÍÓÚ','AEIOU',clasAsi[, c(1)])
clasAsi[2]<- chartr('ÁÉÍÓÚ','AEIOU',clasAsi[, c(2)])
clasAsi[2]<-gsub("[[:punct:]]", "",clasAsi[, c(2)])
colnames(clasAsi)
colnames(FParcial)
FParcial <- FParcial[, -c(19,13,14,15)]
colnames(clasAsi)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(clasAsi)[2] <- 'NOMBRE.DE.LA.ASIGNATURA'
colnames(FParcial)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(FParcial)[3] <- 'NOMBRE.DE.LA.ASIGNATURA'
#names(FParcial)[names(FParcial) == 'dep_Nombre'] <- 'AREA.DE.CONOCIMIENTO'
colnames(FParcial)
FParcial[3]<-revalue(FParcial[, c(3)], c("SEGURIDAD Y SALUD EN ELTRABAJO"='SEGURIDAD Y SALUD EN EL TRABAJO'))
FParcial[3]<-revalue(FParcial[, c(3)], c("CERTIFICACIÓN EN CALIDAD E INOCUIDAD EN LA INDUSTRIA AL"="CERTIFICACIÓN EN CALIDAD E INNOCUIDAD EN LA INDUSTRIA ALIMENTARIA"))
FParcial[3]<-revalue(FParcial[, c(3)], c("FORMULACIÓN Y EVALUACIÓN  DE PROYECTOS"="FORMULACIÓN Y EVALUACIÓN DE PROYECTOS"))
FParcial[3]<-revalue(FParcial[, c(3)], c("INGENERÍA ECONÓMICA"="INGENIERÍA ECONÓMICA"))
FParcial[3]<-revalue(FParcial[, c(3)], c("TRANFERENCIA Y COMERCIALIZACIÓN DE TECNOLOGÍA"="TRANSFERENCIA Y COMERCIALIZACION DE TECNOLOGIA"))
FParcial[3] <- chartr('ÁÉÍÓÚ','AEIOU',FParcial[, c(3)])
FParcial[3] <-gsub("[[:punct:]]", "",FParcial[, c(3)])
#**************
FParcial[1]<-revalue(FParcial[, c(1)], c("I GEST EMP"='INGENIERÍA EN GESTIÓN EMPRESARIAL'))
FParcial[1]<-revalue(FParcial[, c(1)], c('IND. ALIM.'='INGENIERÍA EN INDUSTRIAS ALIMENTARIAS'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. ELECMEC'='INGENIERÍA ELECTROMECÁNICA'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. IND.'='INGENIERÍA INDUSTRIAL'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. LOGISTICA'='INGENIERÍA EN LOGÍSTICA'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. SIS. COMP.'='INGENIERÍA EN SISTEMAS COMPUTACIONALES'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. EN TIC'= 'INGENIERIA EN TIC´S'))
#quitar acentos
FParcial[1] <- chartr('ÁÉÍÓÚ','AEIOU',FParcial[, c(1)])
FParcial$comp <-FParcial$NOMBRE.DE.LA.ASIGNATURA %in% clasAsi$NOMBRE.DE.LA.ASIGNATURA
estaEnClasificacion <- select(FParcial,NOMBRE.DE.LA.ASIGNATURA,comp)
NestaEnClasificacion <-estaEnClasificacion[estaEnClasificacion$comp == FALSE,]
#asignaturas diferentes que no se encuntran en la clasificación, ingles, residencia, sevicio, complementarias
#verificar escritura en ambas tablas
View(asigno)
grupno <- NestaEnClasificacion %>% group_by(NOMBRE.DE.LA.ASIGNATURA)
asigno <- grupno %>% dplyr::summarise(n = n())
FParcial <- merge(FParcial, clasAsi, by = c("PROGRAMA.EDUCATIVO", "NOMBRE.DE.LA.ASIGNATURA"), all.x = TRUE)
colnames(FParcial)
colnames(FParcial)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(FParcial)[2] <- 'NOMBRE.DE.LA.ASIGNATURA'
colnames(FParcial)[3] <- 'gse_Nombre'
colnames(FParcial)[4] <- 'ret_Creditos'
colnames(FParcial)[5] <- 'dep_Nombre'
colnames(FParcial)[6] <- 'cat_Nombre'
colnames(FParcial)[7] <- 'cat_ApePat'
colnames(FParcial)[8] <- 'cat_ApeMAt'
colnames(FParcial)[9] <- 'alu_NumControl'
colnames(FParcial)[10] <- 'Alu_ApePaterno'
colnames(FParcial)[11]  <- 'alu_ApeMaterno'
colnames(FParcial)[12] <- 'alu_Nombre'
colnames(FParcial)[13] <- 'lsc_NumPArcial'
colnames(FParcial)[14] <- 'lsc_Calificacion'
colnames(FParcial)[15] <- 'ind_Nombre'
colnames(FParcial)[16] <- 'calificacion'
colnames(FParcial)
FParcial <-select(FParcial, 1:16,18)
colnames(FParcial)
#filtro
#no visualizar datos donde los datos del area de conocimiento es vacio
FParcial <- FParcial[!is.na(FParcial$calificacion),]
#no visualizar datos donde los datos del area de conocimiento es vacio
FParcial <- FParcial[!is.na(FParcial$AREA.DE.CONOCIMIENTO),]
#**************************filtrar parciales
FParcial <- # para guardar la nueva variable, se 'asigna' al df
FParcial %>% # hacer substring del nombre del grupo solo las primeras tres letras para la clave de reticula
mutate( ret_Clave= substring(gse_Nombre,  1, 3))
#View(FParcial) ver fuente parcial con nueva colmna
#unir los dataframes con parciales correspondientes a los temas
parcialestema<- merge(ot, FParcial, by = c("lsc_NumPArcial","ret_Clave"), all.Y=TRUE)
#View(parcialestema)
#***********************************Fuente del primer parcial
FParcial <- parcialestema[parcialestema$parcial == 1,]
#View(FParcial) visualizar solo el primer parcial
#***********************************
#suma de calificaciones por grupo
r<-aggregate(FParcial$lsc_Calificacion, by=list(gse_Nombre=FParcial$gse_Nombre), FUN=sum)
names(r)[names(r) == 'x'] <- 'sumaCalificaciones'
#si la suma de calificaciones por grupo es 0 no mostrar
r$'sumaCalificaciones'[r$'sumaCalificaciones'== 0] <- NA
#no visualizar dato
r <- r[!is.na(r$sumaCalificaciones),]
#Right (outer) join: unir todas las filas del segundo data frame con las correspondientes en el primero.
sumaFParcial <- merge(r, FParcial, by = c("gse_Nombre"),all.x = TRUE)
sumaFParcial <- within(sumaFParcial, C <- paste(cat_Nombre,cat_ApePat,cat_ApeMAt, sep=' '))
View(sumaFParcial)
mostrarSolo <- select(sumaFParcial,"gse_Nombre","lsc_NumPArcial","parcial","PROGRAMA.EDUCATIVO", "NOMBRE.DE.LA.ASIGNATURA","AREA.DE.CONOCIMIENTO","alu_NumControl","calificacion")
#funcion
mi_sumaria <- function(tabla, funcion){
tabla %>%
group_by(gse_Nombre) %>%
summarise_all(funcion) %>%
mutate(categoria = funcion)
}
maxPGruposReg<- sumaFParcial %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
gsnareaasi<-sumaFParcial[,c("PROGRAMA.EDUCATIVO" ,"gse_Nombre", "AREA.DE.CONOCIMIENTO","NOMBRE.DE.LA.ASIGNATURA","C","sumaCalificaciones")]
gsnareaasi<-gsnareaasi[!duplicated(gsnareaasi), ]
#no visualizar datos donde la temporada es vacío
gsnareaasi <- gsnareaasi[!is.na(gsnareaasi$AREA.DE.CONOCIMIENTO),]
rep1<- merge(gsnareaasi,maxPGruposReg,by = c("gse_Nombre"),all.x = TRUE)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( promedio = sumaCalificaciones / n )
rep1$promedio <- formatC(rep1$promedio, format = "f", digits=2)
#********************APROBADOS
aprobados <- sumaFParcial[sumaFParcial$calificacion >=70,]
grupoParcialap<-aprobados[,c("gse_Nombre", "lsc_NumPArcial")]
nControlGrupoapr<-aprobados[,c("alu_NumControl", "gse_Nombre")]
max <- bind_rows( mi_sumaria(grupoParcialap, "max"))
registrosAlumnap<- nControlGrupoapr %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
maxPGruposRegap<- merge(registrosAlumnap,max)
colnames(maxPGruposRegap)
maxPGruposRegap <-select(maxPGruposRegap,gse_Nombre,n)
names(maxPGruposRegap)[names(maxPGruposRegap) == 'n'] <- 'Numero_aprobados'
#********************APROBADOS
reprobados <- sumaFParcial[sumaFParcial$calificacion < 70,]
grupoParcialrep<-reprobados[,c("gse_Nombre", "lsc_NumPArcial")]
nControlGruporep<-reprobados[,c("alu_NumControl", "gse_Nombre")]
max <- bind_rows( mi_sumaria(grupoParcialrep, "max"))
registrosAlumnrep<- nControlGruporep %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
maxPGruposRegrep<- merge(registrosAlumnrep,max)
colnames(maxPGruposRegrep)
maxPGruposRegrep <-select(maxPGruposRegrep,gse_Nombre,n)
names(maxPGruposRegrep)[names(maxPGruposRegrep) == 'n'] <- 'Numero_reprobados'
#****************REPORTE GENERAL
rep1<- merge(rep1,maxPGruposRegap,by = c("gse_Nombre"),all.x = TRUE)
rep1<- merge(rep1,maxPGruposRegrep,by = c("gse_Nombre"),all.x = TRUE)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( porcentje_Aprobacion = Numero_aprobados / n)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( porcentje_Reprobacion = Numero_reprobados / n)
colnames(rep1)
rep1 <-rep1 %>%
select(PROGRAMA.EDUCATIVO,gse_Nombre,NOMBRE.DE.LA.ASIGNATURA,AREA.DE.CONOCIMIENTO, C,sumaCalificaciones,promedio,n,Numero_aprobados,porcentje_Aprobacion,Numero_reprobados,porcentje_Reprobacion)
rep1$porcentje_Aprobacion <- formatC(rep1$porcentje_Aprobacion, format = "f", digits=2)
rep1 <- rep1 %>%
mutate(porcentje_Aprobacion = as.numeric(porcentje_Aprobacion) * 100)
rep1$porcentje_Aprobacion <- paste(rep1$porcentje_Aprobacion , "%", sep = "")
rep1 <- mutate_all(rep1, ~replace(., is.na(.), 0))
rep1$porcentje_Reprobacion <- formatC(rep1$porcentje_Reprobacion, format = "f", digits=2)
rep1 <- rep1 %>%
mutate(porcentje_Reprobacion = as.numeric(porcentje_Reprobacion) * 100)
rep1$porcentje_Reprobacion <- paste(rep1$porcentje_Reprobacion , "%", sep = "")
#*************Reporte  general de todas carreras
View(rep1)
#***********reporte de ing en sistemas
siscomp<-rep1[rep1$PROGRAMA.EDUCATIVO == "INGENIERIA EN SISTEMAS COMPUTACIONALES",]
reporteAlumnosunir<- merge(siscomp,mostrarSolo,by = c("NOMBRE.DE.LA.ASIGNATURA","AREA.DE.CONOCIMIENTO","PROGRAMA.EDUCATIVO","gse_Nombre"))
View(siscomp)
library(lubridate)
library(ggplot2)
library(dplyr)
library(plyr)
library(tidyr)
library(zoo)
library(Hmisc)
library(sqldf)
library(stringi)
library(tidyverse)
library(data.table)
#datos
FParcial <-read.csv("~/Downloads/datosCalif/FuenteParcial.csv",encoding="UTF-8") #lectura del archivo
str(FParcial)#resumen de los datos, estructura interna de un objeto
str(clasAsi)#resumen de los datos, estructura interna de un objeto
clasAsi <-read.csv("~/Downloads/datosCalif/CLASIF. ASIGNATURAS.csv",encoding="UTF-8")
porc <-read.csv("~/Downloads/datosCalif/POECENTAJES  DE EVALUACIÓN  ENERO - JUNIO  2021.csv",encoding="UTF-8")
porc <- select(porc,2,3,4,5,6,7,8,9,10,11,12)
porc <- porc[!apply(porc == "", 1, all),]
porc <-porc %>% remove_empty("rows")
porc <-porc[-1, ]
nms <- c("PROGRAMA.EDUCATIVO", "semestre","Materia","1","2","3","4","5","6","7","8")
setnames(porc, nms)
colnames(porc)
p <- porc %>%
separate(Materia, c("NOMBRE.DE.LA.ASIGNATURA","ret_Clave"), sep = "-")
p$ret_Clave<-gsub(" ", "",p$ret_Clave)
p <- select(p,4,5,6,7,8,9,10,11,12)
ot <- p %>%
pivot_longer(!ret_Clave, names_to = "tema", values_to = "parcial")
ot$parcial[ot$parcial==""] <-  NA
ot <- filter(ot, !is.na(parcial))
#temas por parcial-View(ot)
colnames(ot)[2]  <- 'lsc_NumPArcial'
# parcialestema<- merge(ot, FParcialRet, by = c("lsc_NumPArcial","ret_Clave"), all.Y=TRUE)
# View(parcialestema)
# colnames(parcialestema)
parcial1 <- parcialestema[parcialestema$parcial == 1,]
View(parcial1)
depesp <- select(FParcial,5,3,2,5,6,7,8,9)
colnames(clasAsi)
z<-data.frame(PROGRAMA.EDUCATIVO=c("INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA ELECTROMECÁNICA","INGENIERÍA INDUSTRIAL"),
NOMBRE.DE.LA.ASIGNATURA=c("INGENIERÍA DE CONTROL CLÁSICO","INSTALACIONES ELÉCTRICAS","INSTALACIONES MECÁNICAS","MÁQUINAS Y EQUIPOS TÉRMICOS I","PROTECCIÓN DE SISTEMAS ELÉCTRICOS DE POTENCIA","SISTEMAS HIDRAULICOS Y NEUMATICOS DE POTENCIA","TÓPICOS DE DISEÑO MECÁNICO","SISTEMAS DE MANUFACTURA"),
AREA.DE.CONOCIMIENTO=c("INGENIERÍA APLICADA Y DISEÑO EN INGENIERÍA","INGENIERÍA APLICADA Y DISEÑO EN INGENIERÍA","DEPTO.DE INGENIERIA ELECTROMECANICA","INGENIERÍA APLICADA Y DISEÑO EN INGENIERÍA","DEPTO.DE INGENIERIA ELECTROMECANICA","INGENIERÍA APLICADA Y DISEÑO EN INGENIERÍA","DEPTO.DE INGENIERIA ELECTROMECANICA","DPTO.DE INGENIERÍA INDUSTRIAL"))
clasAsi<-rbind(clasAsi,z)
unique(clasAsi$NOMBRE.DE.LA.ASIGNATURA)
unique(FParcial$NOMBRE.DE.LA.ASIGNATURA)
clasAsi <- clasAsi[!grepl("ACTIVIDADES", clasAsi$NOMBRE.DE.LA.ASIGNATURA),]
clasAsi <- clasAsi[!grepl("SERVICIO SOCIAL", clasAsi$NOMBRE.DE.LA.ASIGNATURA),]
clasAsi <- clasAsi[!grepl("RESIDENCIA", clasAsi$NOMBRE.DE.LA.ASIGNATURA),]
#*******
clasAsi[2]<-revalue(clasAsi[, c(2)], c("VISIÓN POR COMPUTADORA EN DISPOSITIVOS MÓVILES."='VISIÓN POR COMPUTADORA EN TECNOLOGÍA MÓVIL'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("PROBABILIDAD Y  ESTADÍSTICA"='PROBABILIDAD Y ESTADISTICA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("LENGUAJES MULTIPLATAFORMA PARA EL DESARROLLO MÓVIL."='LENGUAJES MULTIPLATAFORMAS PARA EL DESARROLLO MÓVIL'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("FUNDAMENTOS DE BASES DE DATOS"='FUNDAMENTOS DE BASE DE DATOS'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("ADMINISTRACIÓN DE OPERACIONES II"='ADMINISTRACIÓN DE LAS OPERACIONES II'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("CADENA DE SUMINISTRO Y COMERCIALIZACIÓN ALIMENTARIA"='CADENA DE SUMINISTROS Y COMERCIALIZACION ALIMENTARIA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("EMPAQUE, ENVASE Y EMBALAJE"='EMPAQUE, ENVASE Y EMBALAJE'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("INDUCCIÓN A LA ADMINISTRACIÓN Y ECONOMÍA"='INTRODUCCION A LA ADMINISTRACION Y ECONOMIA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("MODELADO DE SISTEMAS ELÉCTRICOS DE POTENCIA (ESP. SISTEMAS)"='MODELADO DE SISTEMAS ELECTRICOS DE POTENCIA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("QUALITY CORE TOOLS"='QUALITY CORTE TOOLS'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("SISTEMAS DE MANUFACTURA"='SISTEMAS DE MANUFACTURA'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("SISTEMAS ELÉCTRICOS DE POTENCIA 2 (ESP. SISTEMAS)"='SISTEMAS ELECTRICOS DE POTENCIA 2'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TALLER DE CONTROL ESTADÍSTICO DE PROCESO"='TALLER DE CONTROL ESTADISTICO DE PROCESOS'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TECNOLOGÍA DE CONSERVACIÓN"='TECNOLOGIA DE LA CONSERVACION'))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("TRANSFERENCIA Y COMERCIALIZACIÓN DE TECNOLOGÍA"="TRANSFERENCIA Y COMERCIALIZACION DE TECNOLOGIA"))
clasAsi[2]<-revalue(clasAsi[, c(2)], c("ENVASADO DE ALIMENTOS  Y LA INDUSTRIA 4.0"="ENVASADO DE ALIMENTOS Y LA INDUSTRIA 4.0"))
#*****
colnames(FParcial)
clasAsi[1] <- chartr('ÁÉÍÓÚ','AEIOU',clasAsi[, c(1)])
clasAsi[2]<- chartr('ÁÉÍÓÚ','AEIOU',clasAsi[, c(2)])
clasAsi[2]<-gsub("[[:punct:]]", "",clasAsi[, c(2)])
colnames(clasAsi)
colnames(FParcial)
FParcial <- FParcial[, -c(19,13,14,15)]
colnames(clasAsi)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(clasAsi)[2] <- 'NOMBRE.DE.LA.ASIGNATURA'
colnames(FParcial)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(FParcial)[3] <- 'NOMBRE.DE.LA.ASIGNATURA'
#names(FParcial)[names(FParcial) == 'dep_Nombre'] <- 'AREA.DE.CONOCIMIENTO'
colnames(FParcial)
FParcial[3]<-revalue(FParcial[, c(3)], c("SEGURIDAD Y SALUD EN ELTRABAJO"='SEGURIDAD Y SALUD EN EL TRABAJO'))
FParcial[3]<-revalue(FParcial[, c(3)], c("CERTIFICACIÓN EN CALIDAD E INOCUIDAD EN LA INDUSTRIA AL"="CERTIFICACIÓN EN CALIDAD E INNOCUIDAD EN LA INDUSTRIA ALIMENTARIA"))
FParcial[3]<-revalue(FParcial[, c(3)], c("FORMULACIÓN Y EVALUACIÓN  DE PROYECTOS"="FORMULACIÓN Y EVALUACIÓN DE PROYECTOS"))
FParcial[3]<-revalue(FParcial[, c(3)], c("INGENERÍA ECONÓMICA"="INGENIERÍA ECONÓMICA"))
FParcial[3]<-revalue(FParcial[, c(3)], c("TRANFERENCIA Y COMERCIALIZACIÓN DE TECNOLOGÍA"="TRANSFERENCIA Y COMERCIALIZACION DE TECNOLOGIA"))
FParcial[3] <- chartr('ÁÉÍÓÚ','AEIOU',FParcial[, c(3)])
FParcial[3] <-gsub("[[:punct:]]", "",FParcial[, c(3)])
#**************
FParcial[1]<-revalue(FParcial[, c(1)], c("I GEST EMP"='INGENIERÍA EN GESTIÓN EMPRESARIAL'))
FParcial[1]<-revalue(FParcial[, c(1)], c('IND. ALIM.'='INGENIERÍA EN INDUSTRIAS ALIMENTARIAS'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. ELECMEC'='INGENIERÍA ELECTROMECÁNICA'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. IND.'='INGENIERÍA INDUSTRIAL'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. LOGISTICA'='INGENIERÍA EN LOGÍSTICA'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. SIS. COMP.'='INGENIERÍA EN SISTEMAS COMPUTACIONALES'))
FParcial[1]<-revalue(FParcial[, c(1)], c('ING. EN TIC'= 'INGENIERIA EN TIC´S'))
#quitar acentos
FParcial[1] <- chartr('ÁÉÍÓÚ','AEIOU',FParcial[, c(1)])
FParcial$comp <-FParcial$NOMBRE.DE.LA.ASIGNATURA %in% clasAsi$NOMBRE.DE.LA.ASIGNATURA
estaEnClasificacion <- select(FParcial,NOMBRE.DE.LA.ASIGNATURA,comp)
NestaEnClasificacion <-estaEnClasificacion[estaEnClasificacion$comp == FALSE,]
#asignaturas diferentes que no se encuntran en la clasificación, ingles, residencia, sevicio, complementarias
#verificar escritura en ambas tablas
View(asigno)
grupno <- NestaEnClasificacion %>% group_by(NOMBRE.DE.LA.ASIGNATURA)
asigno <- grupno %>% dplyr::summarise(n = n())
FParcial <- merge(FParcial, clasAsi, by = c("PROGRAMA.EDUCATIVO", "NOMBRE.DE.LA.ASIGNATURA"), all.x = TRUE)
colnames(FParcial)
colnames(FParcial)[1]  <- 'PROGRAMA.EDUCATIVO'
colnames(FParcial)[2] <- 'NOMBRE.DE.LA.ASIGNATURA'
colnames(FParcial)[3] <- 'gse_Nombre'
colnames(FParcial)[4] <- 'ret_Creditos'
colnames(FParcial)[5] <- 'dep_Nombre'
colnames(FParcial)[6] <- 'cat_Nombre'
colnames(FParcial)[7] <- 'cat_ApePat'
colnames(FParcial)[8] <- 'cat_ApeMAt'
colnames(FParcial)[9] <- 'alu_NumControl'
colnames(FParcial)[10] <- 'Alu_ApePaterno'
colnames(FParcial)[11]  <- 'alu_ApeMaterno'
colnames(FParcial)[12] <- 'alu_Nombre'
colnames(FParcial)[13] <- 'lsc_NumPArcial'
colnames(FParcial)[14] <- 'lsc_Calificacion'
colnames(FParcial)[15] <- 'ind_Nombre'
colnames(FParcial)[16] <- 'calificacion'
colnames(FParcial)
FParcial <-select(FParcial, 1:16,18)
colnames(FParcial)
#filtro
#no visualizar datos donde los datos del area de conocimiento es vacio
FParcial <- FParcial[!is.na(FParcial$calificacion),]
#no visualizar datos donde los datos del area de conocimiento es vacio
FParcial <- FParcial[!is.na(FParcial$AREA.DE.CONOCIMIENTO),]
#**************************filtrar parciales
FParcial <- # para guardar la nueva variable, se 'asigna' al df
FParcial %>% # hacer substring del nombre del grupo solo las primeras tres letras para la clave de reticula
mutate( ret_Clave= substring(gse_Nombre,  1, 3))
#View(FParcial) ver fuente parcial con nueva colmna
#unir los dataframes con parciales correspondientes a los temas
parcialestema<- merge(ot, FParcial, by = c("lsc_NumPArcial","ret_Clave"), all.Y=TRUE)
#View(parcialestema)
#***********************************Fuente del primer parcial
FParcial <- parcialestema[parcialestema$parcial == 1,]
#View(FParcial) visualizar solo el primer parcial
#***********************************
#suma de calificaciones por grupo
r<-aggregate(FParcial$lsc_Calificacion, by=list(gse_Nombre=FParcial$gse_Nombre), FUN=sum)
names(r)[names(r) == 'x'] <- 'sumaCalificaciones'
#si la suma de calificaciones por grupo es 0 no mostrar
r$'sumaCalificaciones'[r$'sumaCalificaciones'== 0] <- NA
#no visualizar dato
r <- r[!is.na(r$sumaCalificaciones),]
#Right (outer) join: unir todas las filas del segundo data frame con las correspondientes en el primero.
sumaFParcial <- merge(r, FParcial, by = c("gse_Nombre"),all.x = TRUE)
sumaFParcial <- within(sumaFParcial, C <- paste(cat_Nombre,cat_ApePat,cat_ApeMAt, sep=' '))
View(sumaFParcial)
mostrarSolo <- select(sumaFParcial,"gse_Nombre","lsc_NumPArcial","parcial","PROGRAMA.EDUCATIVO", "NOMBRE.DE.LA.ASIGNATURA","AREA.DE.CONOCIMIENTO","alu_NumControl","calificacion")
#funcion
mi_sumaria <- function(tabla, funcion){
tabla %>%
group_by(gse_Nombre) %>%
summarise_all(funcion) %>%
mutate(categoria = funcion)
}
maxPGruposReg<- sumaFParcial %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
gsnareaasi<-sumaFParcial[,c("PROGRAMA.EDUCATIVO" ,"gse_Nombre", "AREA.DE.CONOCIMIENTO","NOMBRE.DE.LA.ASIGNATURA","C","sumaCalificaciones")]
gsnareaasi<-gsnareaasi[!duplicated(gsnareaasi), ]
#no visualizar datos donde la temporada es vacío
gsnareaasi <- gsnareaasi[!is.na(gsnareaasi$AREA.DE.CONOCIMIENTO),]
rep1<- merge(gsnareaasi,maxPGruposReg,by = c("gse_Nombre"),all.x = TRUE)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( promedio = sumaCalificaciones / n )
rep1$promedio <- formatC(rep1$promedio, format = "f", digits=2)
#********************APROBADOS
aprobados <- sumaFParcial[sumaFParcial$calificacion >=70,]
grupoParcialap<-aprobados[,c("gse_Nombre", "lsc_NumPArcial")]
nControlGrupoapr<-aprobados[,c("alu_NumControl", "gse_Nombre")]
max <- bind_rows( mi_sumaria(grupoParcialap, "max"))
registrosAlumnap<- nControlGrupoapr %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
maxPGruposRegap<- merge(registrosAlumnap,max)
colnames(maxPGruposRegap)
maxPGruposRegap <-select(maxPGruposRegap,gse_Nombre,n)
names(maxPGruposRegap)[names(maxPGruposRegap) == 'n'] <- 'Numero_aprobados'
#********************APROBADOS
reprobados <- sumaFParcial[sumaFParcial$calificacion < 70,]
grupoParcialrep<-reprobados[,c("gse_Nombre", "lsc_NumPArcial")]
nControlGruporep<-reprobados[,c("alu_NumControl", "gse_Nombre")]
max <- bind_rows( mi_sumaria(grupoParcialrep, "max"))
registrosAlumnrep<- nControlGruporep %>%
group_by(gse_Nombre) %>%
dplyr::summarise(n = n())
maxPGruposRegrep<- merge(registrosAlumnrep,max)
colnames(maxPGruposRegrep)
maxPGruposRegrep <-select(maxPGruposRegrep,gse_Nombre,n)
names(maxPGruposRegrep)[names(maxPGruposRegrep) == 'n'] <- 'Numero_reprobados'
#****************REPORTE GENERAL
rep1<- merge(rep1,maxPGruposRegap,by = c("gse_Nombre"),all.x = TRUE)
rep1<- merge(rep1,maxPGruposRegrep,by = c("gse_Nombre"),all.x = TRUE)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( porcentje_Aprobacion = Numero_aprobados / n)
rep1 <- # para guardar la nueva variable, se 'asigna' al df
rep1 %>% # del data frame completo
mutate( porcentje_Reprobacion = Numero_reprobados / n)
colnames(rep1)
rep1 <-rep1 %>%
select(PROGRAMA.EDUCATIVO,gse_Nombre,NOMBRE.DE.LA.ASIGNATURA,AREA.DE.CONOCIMIENTO, C,sumaCalificaciones,promedio,n,Numero_aprobados,porcentje_Aprobacion,Numero_reprobados,porcentje_Reprobacion)
rep1$porcentje_Aprobacion <- formatC(rep1$porcentje_Aprobacion, format = "f", digits=2)
rep1 <- rep1 %>%
mutate(porcentje_Aprobacion = as.numeric(porcentje_Aprobacion) * 100)
rep1$porcentje_Aprobacion <- paste(rep1$porcentje_Aprobacion , "%", sep = "")
rep1 <- mutate_all(rep1, ~replace(., is.na(.), 0))
rep1$porcentje_Reprobacion <- formatC(rep1$porcentje_Reprobacion, format = "f", digits=2)
rep1 <- rep1 %>%
mutate(porcentje_Reprobacion = as.numeric(porcentje_Reprobacion) * 100)
rep1$porcentje_Reprobacion <- paste(rep1$porcentje_Reprobacion , "%", sep = "")
#*************Reporte  general de todas carreras
View(rep1)
#***********reporte de ing en sistemas
siscomp<-rep1[rep1$PROGRAMA.EDUCATIVO == "INGENIERIA EN SISTEMAS COMPUTACIONALES",]
reporteAlumnosunir<- merge(siscomp,mostrarSolo,by = c("NOMBRE.DE.LA.ASIGNATURA","AREA.DE.CONOCIMIENTO","PROGRAMA.EDUCATIVO","gse_Nombre"))
View(siscomp)
#***********reporte SUMAS CALIFS, PROMEDIO CALIFS, TOTAL DE ESTUDIANTES POR AREA
#ver si hay materias diferentes
s <- unique(siscomp$AREA.DE.CONOCIMIENTO)
length(s)
listOfDataframe <- lst()
sumaCalifs <- lst()
totalEst<- lst()
for (i in  1:length(s)){
listOfDataframe[[i]]<-siscomp[siscomp$AREA.DE.CONOCIMIENTO == s[i], ]
View(listOfDataframe[[i]])
sumaCalifs[[i]] <- c(s[i],sum(listOfDataframe[[i]]$sumaCalificaciones))
totalEst[[i]] <- c(s[i],sum(listOfDataframe[[i]]$n))
}
sumitas <- data.frame(matrix(unlist(sumaCalifs), nrow = length(sumaCalifs), byrow = TRUE))
colnames(sumitas)[2]  <- 'tc'
nsuma<- data.frame(matrix(unlist(totalEst), nrow = length(totalEst), byrow = TRUE))
colnames(nsuma)[2]  <- 'te'
unir<- merge(nsuma,sumitas,by = c("X1"))
unir[, c(2,3)] <- sapply(unir[, c(2,3)], as.numeric)
unir <- # para guardar la nueva variable, se 'asigna' al df
unir %>% # del data frame completo
mutate(p = (tc)/te)
colnames(unir)[1]  <- 'AREA.DE.CONOCIMIENTO'
#***************TOTALES POR AREA
#*ESTUDIANTES EVALUADOS
sumanAREA<- reporteAlumnosunir %>%
group_by(AREA.DE.CONOCIMIENTO) %>%
dplyr::summarise(estudiantesEval = n_distinct(alu_NumControl))
#*REPROBADOS POR PARCIAL
reprobadosArea <- reporteAlumnosunir[reporteAlumnosunir$calificacion <70,]
reprobadosArea<- reprobadosArea %>%
group_by(AREA.DE.CONOCIMIENTO) %>%
dplyr::summarise(rep = n_distinct(alu_NumControl))
areaTotalRep<- merge(sumanAREA,reprobadosArea,by = c("AREA.DE.CONOCIMIENTO"))
colnames(areaTotalRepAp)
areaTotalRepAp <- # para guardar la nueva variable, se 'asigna' al df
areaTotalRep %>% # del data frame completo
mutate( totalAprobados= estudiantesEval - rep)
#*******porcentajes apro
areaTotalRepAp <- # para guardar la nueva variable, se 'asigna' al df
areaTotalRepAp %>% # del data frame completo
mutate( porcentjeAprobados = totalAprobados/ estudiantesEval)
areaTotalRepAp$porcentjeAprobados <- formatC(areaTotalRepAp$porcentjeAprobados, format = "f", digits=4)
areaTotalRepAp <- areaTotalRepAp %>%
mutate(porcentjeAprobados = as.numeric(porcentjeAprobados) * 100)
areaTotalRepAp$porcentjeAprobados <- paste(areaTotalRepAp$porcentjeAprobados , "%", sep = "")
#*******porcentajes rep
areaTotalRepAp <- # para guardar la nueva variable, se 'asigna' al df
areaTotalRepAp %>% # del data frame completo
mutate( porcentjeReprobados = rep/ estudiantesEval)
areaTotalRepAp$porcentjeReprobados <- formatC(areaTotalRepAp$porcentjeReprobados, format = "f", digits=4)
areaTotalRepAp <- areaTotalRepAp %>%
mutate(porcentjeReprobados = as.numeric(porcentjeReprobados) * 100)
areaTotalRepAp$porcentjeReprobados <- paste(areaTotalRepAp$porcentjeReprobados , "%", sep = "")
totalesxAreaSistemas<- merge(areaTotalRepAp,unir,by = c("AREA.DE.CONOCIMIENTO"))
totalesxAreaSistemas <- select(totalesxAreaSistemas,"AREA.DE.CONOCIMIENTO","tc","te","p","estudiantesEval","totalAprobados","porcentjeAprobados","rep","porcentjeReprobados")
colnames(totalesxAreaSistemas)[2] <- 'Suma total/calificaciones'
colnames(totalesxAreaSistemas)[3] <- 'Suma total/Evaluados'
colnames(totalesxAreaSistemas)[4] <- 'Suma total/promedio'
colnames(totalesxAreaSistemas)[5] <- 'Toatl Estudiantes-Eval'
colnames(totalesxAreaSistemas)[6] <- 'Aprobados'
colnames(totalesxAreaSistemas)[7] <- '% de Aprobacion'
colnames(totalesxAreaSistemas)[8] <- 'Reprobados'
colnames(totalesxAreaSistemas)[9] <- '% de Reprobacion'
View(totalesxAreaSistemas)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
# demoing group support in the `choices` arg
shinyApp(
ui = fluidPage(
selectInput("state", "Choose a state:",
list(`East Coast` = list("NY", "NJ", "CT"),
`West Coast` = list("WA", "OR", "CA"),
`Midwest` = list("MN", "WI", "IA"))
),
textOutput("result")
),
server = function(input, output) {
output$result <- renderText({
paste("You chose", input$state)
})
}
)
source("~/Downloads/webDatosNetflix.R")
shiny::runApp()
runApp()
runApp()
shiny::runApp()
